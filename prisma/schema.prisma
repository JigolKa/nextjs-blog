generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model User {
  userId         String        @id @default(auto()) @map("_id") @db.ObjectId
  username       String        @unique
  email          String        @unique
  password       String
  createdAt      DateTime      @default(now())
  permissions    String[]
  profilePicture String        @default("https://www.gravatar.com/avatar/00000000000000000000000000000000?d=mp&f=y")
  biography      String?
  links          ProfileLink[]
  posts          Post[]
  followedBy     User[]        @relation(name: "UserFollows", fields: [followedByIDs], references: [userId])
  followedByIDs  String[]      @db.ObjectId
  following      User[]        @relation(name: "UserFollows", fields: [followingIDs], references: [userId])
  followingIDs   String[]      @db.ObjectId
  activated      Boolean       @default(false)
  likedIDs       String[]      @db.ObjectId
  liked          Post[]        @relation(name: "likedPosts", fields: [likedIDs], references: [postId])
  dislikedIDs    String[]      @db.ObjectId
  disliked       Post[]        @relation(name: "dislikedPosts", fields: [dislikedIDs], references: [postId])
  comments       Comment[]
}

model Post {
  postId        String    @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  title         String
  createdAt     DateTime  @default(now())
  images        String[]
  video         String?
  quotedWebsite String?
  timezone      String
  topics        String[]
  slug          String    @unique
  likedByIDs    String[]  @db.ObjectId
  likedBy       User[]    @relation(name: "likedPosts", fields: [likedByIDs], references: [userId])
  dislikedByIDs String[]  @db.ObjectId
  dislikedBy    User[]    @relation(name: "dislikedPosts", fields: [dislikedByIDs], references: [userId])
  author        User      @relation(fields: [authorId], references: [userId])
  authorId      String    @db.ObjectId
  comments      Comment[]
}

model Comment {
  commentId String @id @default(auto()) @map("_id") @db.ObjectId
  author    User   @relation(fields: [authorId], references: [userId])
  post      Post   @relation(fields: [postId], references: [postId])
  authorId  String @db.ObjectId
  postId    String @db.ObjectId
}

model Activation {
  activationId String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
}

type ProfileLink {
  url  String
  icon String
}
